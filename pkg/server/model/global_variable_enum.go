// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"fmt"
	"strings"
)

const (
	// GlobalVariableFieldsId is a GlobalVariableFields of type Id.
	GlobalVariableFieldsId GlobalVariableFields = iota
	// GlobalVariableFieldsUuid is a GlobalVariableFields of type Uuid.
	GlobalVariableFieldsUuid
	// GlobalVariableFieldsName is a GlobalVariableFields of type Name.
	GlobalVariableFieldsName
	// GlobalVariableFieldsSummary is a GlobalVariableFields of type Summary.
	GlobalVariableFieldsSummary
	// GlobalVariableFieldsValue is a GlobalVariableFields of type Value.
	GlobalVariableFieldsValue
	// GlobalVariableFieldsCreated is a GlobalVariableFields of type Created.
	GlobalVariableFieldsCreated
	// GlobalVariableFieldsUpdated is a GlobalVariableFields of type Updated.
	GlobalVariableFieldsUpdated
)

var ErrInvalidGlobalVariableFields = fmt.Errorf("not a valid GlobalVariableFields, try [%s]", strings.Join(_GlobalVariableFieldsNames, ", "))

const _GlobalVariableFieldsName = "iduuidnamesummaryvaluecreatedupdated"

var _GlobalVariableFieldsNames = []string{
	_GlobalVariableFieldsName[0:2],
	_GlobalVariableFieldsName[2:6],
	_GlobalVariableFieldsName[6:10],
	_GlobalVariableFieldsName[10:17],
	_GlobalVariableFieldsName[17:22],
	_GlobalVariableFieldsName[22:29],
	_GlobalVariableFieldsName[29:36],
}

// GlobalVariableFieldsNames returns a list of possible string values of GlobalVariableFields.
func GlobalVariableFieldsNames() []string {
	tmp := make([]string, len(_GlobalVariableFieldsNames))
	copy(tmp, _GlobalVariableFieldsNames)
	return tmp
}

var _GlobalVariableFieldsMap = map[GlobalVariableFields]string{
	GlobalVariableFieldsId:      _GlobalVariableFieldsName[0:2],
	GlobalVariableFieldsUuid:    _GlobalVariableFieldsName[2:6],
	GlobalVariableFieldsName:    _GlobalVariableFieldsName[6:10],
	GlobalVariableFieldsSummary: _GlobalVariableFieldsName[10:17],
	GlobalVariableFieldsValue:   _GlobalVariableFieldsName[17:22],
	GlobalVariableFieldsCreated: _GlobalVariableFieldsName[22:29],
	GlobalVariableFieldsUpdated: _GlobalVariableFieldsName[29:36],
}

// String implements the Stringer interface.
func (x GlobalVariableFields) String() string {
	if str, ok := _GlobalVariableFieldsMap[x]; ok {
		return str
	}
	return fmt.Sprintf("GlobalVariableFields(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x GlobalVariableFields) IsValid() bool {
	_, ok := _GlobalVariableFieldsMap[x]
	return ok
}

var _GlobalVariableFieldsValue = map[string]GlobalVariableFields{
	_GlobalVariableFieldsName[0:2]:                    GlobalVariableFieldsId,
	strings.ToLower(_GlobalVariableFieldsName[0:2]):   GlobalVariableFieldsId,
	_GlobalVariableFieldsName[2:6]:                    GlobalVariableFieldsUuid,
	strings.ToLower(_GlobalVariableFieldsName[2:6]):   GlobalVariableFieldsUuid,
	_GlobalVariableFieldsName[6:10]:                   GlobalVariableFieldsName,
	strings.ToLower(_GlobalVariableFieldsName[6:10]):  GlobalVariableFieldsName,
	_GlobalVariableFieldsName[10:17]:                  GlobalVariableFieldsSummary,
	strings.ToLower(_GlobalVariableFieldsName[10:17]): GlobalVariableFieldsSummary,
	_GlobalVariableFieldsName[17:22]:                  GlobalVariableFieldsValue,
	strings.ToLower(_GlobalVariableFieldsName[17:22]): GlobalVariableFieldsValue,
	_GlobalVariableFieldsName[22:29]:                  GlobalVariableFieldsCreated,
	strings.ToLower(_GlobalVariableFieldsName[22:29]): GlobalVariableFieldsCreated,
	_GlobalVariableFieldsName[29:36]:                  GlobalVariableFieldsUpdated,
	strings.ToLower(_GlobalVariableFieldsName[29:36]): GlobalVariableFieldsUpdated,
}

// ParseGlobalVariableFields attempts to convert a string to a GlobalVariableFields.
func ParseGlobalVariableFields(name string) (GlobalVariableFields, error) {
	if x, ok := _GlobalVariableFieldsValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _GlobalVariableFieldsValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return GlobalVariableFields(0), fmt.Errorf("%s is %w", name, ErrInvalidGlobalVariableFields)
}
