// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"fmt"
	"strings"
)

const (
	// ClusterInformationFieldsId is a ClusterInformationFields of type Id.
	ClusterInformationFieldsId ClusterInformationFields = iota
	// ClusterInformationFieldsClusterUuid is a ClusterInformationFields of type Cluster_uuid.
	ClusterInformationFieldsClusterUuid
	// ClusterInformationFieldsPollingOffset is a ClusterInformationFields of type Polling_offset.
	ClusterInformationFieldsPollingOffset
	// ClusterInformationFieldsCreated is a ClusterInformationFields of type Created.
	ClusterInformationFieldsCreated
	// ClusterInformationFieldsUpdated is a ClusterInformationFields of type Updated.
	ClusterInformationFieldsUpdated
)

var ErrInvalidClusterInformationFields = fmt.Errorf("not a valid ClusterInformationFields, try [%s]", strings.Join(_ClusterInformationFieldsNames, ", "))

const _ClusterInformationFieldsName = "idcluster_uuidpolling_offsetcreatedupdated"

var _ClusterInformationFieldsNames = []string{
	_ClusterInformationFieldsName[0:2],
	_ClusterInformationFieldsName[2:14],
	_ClusterInformationFieldsName[14:28],
	_ClusterInformationFieldsName[28:35],
	_ClusterInformationFieldsName[35:42],
}

// ClusterInformationFieldsNames returns a list of possible string values of ClusterInformationFields.
func ClusterInformationFieldsNames() []string {
	tmp := make([]string, len(_ClusterInformationFieldsNames))
	copy(tmp, _ClusterInformationFieldsNames)
	return tmp
}

var _ClusterInformationFieldsMap = map[ClusterInformationFields]string{
	ClusterInformationFieldsId:            _ClusterInformationFieldsName[0:2],
	ClusterInformationFieldsClusterUuid:   _ClusterInformationFieldsName[2:14],
	ClusterInformationFieldsPollingOffset: _ClusterInformationFieldsName[14:28],
	ClusterInformationFieldsCreated:       _ClusterInformationFieldsName[28:35],
	ClusterInformationFieldsUpdated:       _ClusterInformationFieldsName[35:42],
}

// String implements the Stringer interface.
func (x ClusterInformationFields) String() string {
	if str, ok := _ClusterInformationFieldsMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ClusterInformationFields(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ClusterInformationFields) IsValid() bool {
	_, ok := _ClusterInformationFieldsMap[x]
	return ok
}

var _ClusterInformationFieldsValue = map[string]ClusterInformationFields{
	_ClusterInformationFieldsName[0:2]:                    ClusterInformationFieldsId,
	strings.ToLower(_ClusterInformationFieldsName[0:2]):   ClusterInformationFieldsId,
	_ClusterInformationFieldsName[2:14]:                   ClusterInformationFieldsClusterUuid,
	strings.ToLower(_ClusterInformationFieldsName[2:14]):  ClusterInformationFieldsClusterUuid,
	_ClusterInformationFieldsName[14:28]:                  ClusterInformationFieldsPollingOffset,
	strings.ToLower(_ClusterInformationFieldsName[14:28]): ClusterInformationFieldsPollingOffset,
	_ClusterInformationFieldsName[28:35]:                  ClusterInformationFieldsCreated,
	strings.ToLower(_ClusterInformationFieldsName[28:35]): ClusterInformationFieldsCreated,
	_ClusterInformationFieldsName[35:42]:                  ClusterInformationFieldsUpdated,
	strings.ToLower(_ClusterInformationFieldsName[35:42]): ClusterInformationFieldsUpdated,
}

// ParseClusterInformationFields attempts to convert a string to a ClusterInformationFields.
func ParseClusterInformationFields(name string) (ClusterInformationFields, error) {
	if x, ok := _ClusterInformationFieldsValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _ClusterInformationFieldsValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return ClusterInformationFields(0), fmt.Errorf("%s is %w", name, ErrInvalidClusterInformationFields)
}
