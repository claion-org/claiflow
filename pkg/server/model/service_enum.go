// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"fmt"
	"strings"
)

const (
	// ClusterServiceFieldsPdate is a ClusterServiceFields of type Pdate.
	ClusterServiceFieldsPdate ClusterServiceFields = iota
	// ClusterServiceFieldsClusterUuid is a ClusterServiceFields of type Cluster_uuid.
	ClusterServiceFieldsClusterUuid
	// ClusterServiceFieldsUuid is a ClusterServiceFields of type Uuid.
	ClusterServiceFieldsUuid
	// ClusterServiceFieldsName is a ClusterServiceFields of type Name.
	ClusterServiceFieldsName
	// ClusterServiceFieldsSummary is a ClusterServiceFields of type Summary.
	ClusterServiceFieldsSummary
	// ClusterServiceFieldsTemplateUuid is a ClusterServiceFields of type Template_uuid.
	ClusterServiceFieldsTemplateUuid
	// ClusterServiceFieldsFlow is a ClusterServiceFields of type Flow.
	ClusterServiceFieldsFlow
	// ClusterServiceFieldsInputs is a ClusterServiceFields of type Inputs.
	ClusterServiceFieldsInputs
	// ClusterServiceFieldsStepMax is a ClusterServiceFields of type Step_max.
	ClusterServiceFieldsStepMax
	// ClusterServiceFieldsSubscribedChannel is a ClusterServiceFields of type Subscribed_channel.
	ClusterServiceFieldsSubscribedChannel
	// ClusterServiceFieldsPriority is a ClusterServiceFields of type Priority.
	ClusterServiceFieldsPriority
	// ClusterServiceFieldsCreated is a ClusterServiceFields of type Created.
	ClusterServiceFieldsCreated
)

var ErrInvalidClusterServiceFields = fmt.Errorf("not a valid ClusterServiceFields, try [%s]", strings.Join(_ClusterServiceFieldsNames, ", "))

const _ClusterServiceFieldsName = "pdatecluster_uuiduuidnamesummarytemplate_uuidflowinputsstep_maxsubscribed_channelprioritycreated"

var _ClusterServiceFieldsNames = []string{
	_ClusterServiceFieldsName[0:5],
	_ClusterServiceFieldsName[5:17],
	_ClusterServiceFieldsName[17:21],
	_ClusterServiceFieldsName[21:25],
	_ClusterServiceFieldsName[25:32],
	_ClusterServiceFieldsName[32:45],
	_ClusterServiceFieldsName[45:49],
	_ClusterServiceFieldsName[49:55],
	_ClusterServiceFieldsName[55:63],
	_ClusterServiceFieldsName[63:81],
	_ClusterServiceFieldsName[81:89],
	_ClusterServiceFieldsName[89:96],
}

// ClusterServiceFieldsNames returns a list of possible string values of ClusterServiceFields.
func ClusterServiceFieldsNames() []string {
	tmp := make([]string, len(_ClusterServiceFieldsNames))
	copy(tmp, _ClusterServiceFieldsNames)
	return tmp
}

var _ClusterServiceFieldsMap = map[ClusterServiceFields]string{
	ClusterServiceFieldsPdate:             _ClusterServiceFieldsName[0:5],
	ClusterServiceFieldsClusterUuid:       _ClusterServiceFieldsName[5:17],
	ClusterServiceFieldsUuid:              _ClusterServiceFieldsName[17:21],
	ClusterServiceFieldsName:              _ClusterServiceFieldsName[21:25],
	ClusterServiceFieldsSummary:           _ClusterServiceFieldsName[25:32],
	ClusterServiceFieldsTemplateUuid:      _ClusterServiceFieldsName[32:45],
	ClusterServiceFieldsFlow:              _ClusterServiceFieldsName[45:49],
	ClusterServiceFieldsInputs:            _ClusterServiceFieldsName[49:55],
	ClusterServiceFieldsStepMax:           _ClusterServiceFieldsName[55:63],
	ClusterServiceFieldsSubscribedChannel: _ClusterServiceFieldsName[63:81],
	ClusterServiceFieldsPriority:          _ClusterServiceFieldsName[81:89],
	ClusterServiceFieldsCreated:           _ClusterServiceFieldsName[89:96],
}

// String implements the Stringer interface.
func (x ClusterServiceFields) String() string {
	if str, ok := _ClusterServiceFieldsMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ClusterServiceFields(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ClusterServiceFields) IsValid() bool {
	_, ok := _ClusterServiceFieldsMap[x]
	return ok
}

var _ClusterServiceFieldsValue = map[string]ClusterServiceFields{
	_ClusterServiceFieldsName[0:5]:                    ClusterServiceFieldsPdate,
	strings.ToLower(_ClusterServiceFieldsName[0:5]):   ClusterServiceFieldsPdate,
	_ClusterServiceFieldsName[5:17]:                   ClusterServiceFieldsClusterUuid,
	strings.ToLower(_ClusterServiceFieldsName[5:17]):  ClusterServiceFieldsClusterUuid,
	_ClusterServiceFieldsName[17:21]:                  ClusterServiceFieldsUuid,
	strings.ToLower(_ClusterServiceFieldsName[17:21]): ClusterServiceFieldsUuid,
	_ClusterServiceFieldsName[21:25]:                  ClusterServiceFieldsName,
	strings.ToLower(_ClusterServiceFieldsName[21:25]): ClusterServiceFieldsName,
	_ClusterServiceFieldsName[25:32]:                  ClusterServiceFieldsSummary,
	strings.ToLower(_ClusterServiceFieldsName[25:32]): ClusterServiceFieldsSummary,
	_ClusterServiceFieldsName[32:45]:                  ClusterServiceFieldsTemplateUuid,
	strings.ToLower(_ClusterServiceFieldsName[32:45]): ClusterServiceFieldsTemplateUuid,
	_ClusterServiceFieldsName[45:49]:                  ClusterServiceFieldsFlow,
	strings.ToLower(_ClusterServiceFieldsName[45:49]): ClusterServiceFieldsFlow,
	_ClusterServiceFieldsName[49:55]:                  ClusterServiceFieldsInputs,
	strings.ToLower(_ClusterServiceFieldsName[49:55]): ClusterServiceFieldsInputs,
	_ClusterServiceFieldsName[55:63]:                  ClusterServiceFieldsStepMax,
	strings.ToLower(_ClusterServiceFieldsName[55:63]): ClusterServiceFieldsStepMax,
	_ClusterServiceFieldsName[63:81]:                  ClusterServiceFieldsSubscribedChannel,
	strings.ToLower(_ClusterServiceFieldsName[63:81]): ClusterServiceFieldsSubscribedChannel,
	_ClusterServiceFieldsName[81:89]:                  ClusterServiceFieldsPriority,
	strings.ToLower(_ClusterServiceFieldsName[81:89]): ClusterServiceFieldsPriority,
	_ClusterServiceFieldsName[89:96]:                  ClusterServiceFieldsCreated,
	strings.ToLower(_ClusterServiceFieldsName[89:96]): ClusterServiceFieldsCreated,
}

// ParseClusterServiceFields attempts to convert a string to a ClusterServiceFields.
func ParseClusterServiceFields(name string) (ClusterServiceFields, error) {
	if x, ok := _ClusterServiceFieldsValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _ClusterServiceFieldsValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return ClusterServiceFields(0), fmt.Errorf("%s is %w", name, ErrInvalidClusterServiceFields)
}

const (
	// PriorityLow is a Priority of type Low.
	PriorityLow Priority = iota
	// PriorityMiddle is a Priority of type Middle.
	PriorityMiddle
	// PriorityHigh is a Priority of type High.
	PriorityHigh
)

var ErrInvalidPriority = fmt.Errorf("not a valid Priority, try [%s]", strings.Join(_PriorityNames, ", "))

const _PriorityName = "lowmiddlehigh"

var _PriorityNames = []string{
	_PriorityName[0:3],
	_PriorityName[3:9],
	_PriorityName[9:13],
}

// PriorityNames returns a list of possible string values of Priority.
func PriorityNames() []string {
	tmp := make([]string, len(_PriorityNames))
	copy(tmp, _PriorityNames)
	return tmp
}

var _PriorityMap = map[Priority]string{
	PriorityLow:    _PriorityName[0:3],
	PriorityMiddle: _PriorityName[3:9],
	PriorityHigh:   _PriorityName[9:13],
}

// String implements the Stringer interface.
func (x Priority) String() string {
	if str, ok := _PriorityMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Priority(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Priority) IsValid() bool {
	_, ok := _PriorityMap[x]
	return ok
}

var _PriorityValue = map[string]Priority{
	_PriorityName[0:3]:                   PriorityLow,
	strings.ToLower(_PriorityName[0:3]):  PriorityLow,
	_PriorityName[3:9]:                   PriorityMiddle,
	strings.ToLower(_PriorityName[3:9]):  PriorityMiddle,
	_PriorityName[9:13]:                  PriorityHigh,
	strings.ToLower(_PriorityName[9:13]): PriorityHigh,
}

// ParsePriority attempts to convert a string to a Priority.
func ParsePriority(name string) (Priority, error) {
	if x, ok := _PriorityValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _PriorityValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Priority(0), fmt.Errorf("%s is %w", name, ErrInvalidPriority)
}

const (
	// ResultSaveTypeNone is a ResultSaveType of type None.
	ResultSaveTypeNone ResultSaveType = iota
	// ResultSaveTypeDatabase is a ResultSaveType of type Database.
	ResultSaveTypeDatabase
)

var ErrInvalidResultSaveType = fmt.Errorf("not a valid ResultSaveType, try [%s]", strings.Join(_ResultSaveTypeNames, ", "))

const _ResultSaveTypeName = "nonedatabase"

var _ResultSaveTypeNames = []string{
	_ResultSaveTypeName[0:4],
	_ResultSaveTypeName[4:12],
}

// ResultSaveTypeNames returns a list of possible string values of ResultSaveType.
func ResultSaveTypeNames() []string {
	tmp := make([]string, len(_ResultSaveTypeNames))
	copy(tmp, _ResultSaveTypeNames)
	return tmp
}

var _ResultSaveTypeMap = map[ResultSaveType]string{
	ResultSaveTypeNone:     _ResultSaveTypeName[0:4],
	ResultSaveTypeDatabase: _ResultSaveTypeName[4:12],
}

// String implements the Stringer interface.
func (x ResultSaveType) String() string {
	if str, ok := _ResultSaveTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ResultSaveType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ResultSaveType) IsValid() bool {
	_, ok := _ResultSaveTypeMap[x]
	return ok
}

var _ResultSaveTypeValue = map[string]ResultSaveType{
	_ResultSaveTypeName[0:4]:                   ResultSaveTypeNone,
	strings.ToLower(_ResultSaveTypeName[0:4]):  ResultSaveTypeNone,
	_ResultSaveTypeName[4:12]:                  ResultSaveTypeDatabase,
	strings.ToLower(_ResultSaveTypeName[4:12]): ResultSaveTypeDatabase,
}

// ParseResultSaveType attempts to convert a string to a ResultSaveType.
func ParseResultSaveType(name string) (ResultSaveType, error) {
	if x, ok := _ResultSaveTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _ResultSaveTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return ResultSaveType(0), fmt.Errorf("%s is %w", name, ErrInvalidResultSaveType)
}

const (
	// StepStatusRegist is a StepStatus of type Regist.
	StepStatusRegist StepStatus = iota
	// StepStatusSent is a StepStatus of type Sent.
	StepStatusSent
	// StepStatusProcessing is a StepStatus of type Processing.
	StepStatusProcessing
	// StepStatusSucceeded is a StepStatus of type Succeeded.
	StepStatusSucceeded StepStatus = iota + 1
	// StepStatusFailed is a StepStatus of type Failed.
	StepStatusFailed StepStatus = iota + 4
)

var ErrInvalidStepStatus = fmt.Errorf("not a valid StepStatus, try [%s]", strings.Join(_StepStatusNames, ", "))

const _StepStatusName = "registsentprocessingsucceededfailed"

var _StepStatusNames = []string{
	_StepStatusName[0:6],
	_StepStatusName[6:10],
	_StepStatusName[10:20],
	_StepStatusName[20:29],
	_StepStatusName[29:35],
}

// StepStatusNames returns a list of possible string values of StepStatus.
func StepStatusNames() []string {
	tmp := make([]string, len(_StepStatusNames))
	copy(tmp, _StepStatusNames)
	return tmp
}

var _StepStatusMap = map[StepStatus]string{
	StepStatusRegist:     _StepStatusName[0:6],
	StepStatusSent:       _StepStatusName[6:10],
	StepStatusProcessing: _StepStatusName[10:20],
	StepStatusSucceeded:  _StepStatusName[20:29],
	StepStatusFailed:     _StepStatusName[29:35],
}

// String implements the Stringer interface.
func (x StepStatus) String() string {
	if str, ok := _StepStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("StepStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StepStatus) IsValid() bool {
	_, ok := _StepStatusMap[x]
	return ok
}

var _StepStatusValue = map[string]StepStatus{
	_StepStatusName[0:6]:                    StepStatusRegist,
	strings.ToLower(_StepStatusName[0:6]):   StepStatusRegist,
	_StepStatusName[6:10]:                   StepStatusSent,
	strings.ToLower(_StepStatusName[6:10]):  StepStatusSent,
	_StepStatusName[10:20]:                  StepStatusProcessing,
	strings.ToLower(_StepStatusName[10:20]): StepStatusProcessing,
	_StepStatusName[20:29]:                  StepStatusSucceeded,
	strings.ToLower(_StepStatusName[20:29]): StepStatusSucceeded,
	_StepStatusName[29:35]:                  StepStatusFailed,
	strings.ToLower(_StepStatusName[29:35]): StepStatusFailed,
}

// ParseStepStatus attempts to convert a string to a StepStatus.
func ParseStepStatus(name string) (StepStatus, error) {
	if x, ok := _StepStatusValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _StepStatusValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return StepStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidStepStatus)
}
